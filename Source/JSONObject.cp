#include "JSONObject.h"// ---------------------------------------------------------------------------//		¥ JSONObject// ---------------------------------------------------------------------------//	Default constructorJSONObject::JSONObject(){		parentObject 	= NULL;	indent 			= 1;	_isArray		= false;}// ---------------------------------------------------------------------------//		¥ JSONObject(bool isArray)// ---------------------------------------------------------------------------JSONObject::JSONObject(bool isArray){		parentObject 	= NULL;	indent 			= 1;	_isArray		= isArray;	}// ---------------------------------------------------------------------------//		¥ ~JSONObject// ---------------------------------------------------------------------------//	DestructorJSONObject::~JSONObject(){	attributes.empty();	array.empty();}// ---------------------------------------------------------------------------//		¥ empty// ---------------------------------------------------------------------------boolJSONObject::empty(){	return(attributes.empty());}// ---------------------------------------------------------------------------//		¥ isArray// ---------------------------------------------------------------------------boolJSONObject::isArray(){	return _isArray;}// ---------------------------------------------------------------------------//		¥ setIndent// ---------------------------------------------------------------------------voidJSONObject::setIndent(int ind){	indent = ind;}// ---------------------------------------------------------------------------//		¥ getParent// --------------------------------------------------------------------------- JSONObject *JSONObject::getParent(){	return (parentObject);}// ---------------------------------------------------------------------------//		¥ setParent// ---------------------------------------------------------------------------voidJSONObject::setParent(JSONObject* parent){	parentObject = parent;}// ---------------------------------------------------------------------------//		¥ getValue(string key)// --------------------------------------------------------------------------- JSONValue *JSONObject::getValue(string key){		if (!_isArray && attributes.find(key) != attributes.end()) {		return(attributes[key]);	}	else {		return NULL;	}}// ---------------------------------------------------------------------------//		¥ getValue(int position)// --------------------------------------------------------------------------- JSONValue *JSONObject::getValue(int position){	if (_isArray && position < array.size()) {		return(array[position]);	}	else {		return NULL;	}	}// ---------------------------------------------------------------------------//		¥ getValue(string key, JSONValue * value)// --------------------------------------------------------------------------- voidJSONObject::setValue(	string key, 						JSONValue * value){		//const pair<string, JSONValue *> newPair (key, value);		//map<string, JSONValue *, less<string>, allocator<JSONValue *> >::iterator it = attributes.begin();		//attributes.insert(it, newPair);		attributes[key] = value;}// ---------------------------------------------------------------------------//		¥ getValue(string key, JSONObject * objectVal)// --------------------------------------------------------------------------- voidJSONObject::setValue(	string key, 						JSONObject* objectVal){	JSONValue* value = new JSONValue();	value->setValue(objectVal);	this->setValue(key, value);}// ---------------------------------------------------------------------------//		¥ setValue(string key, string stringVal, JSONValue::Type type)// --------------------------------------------------------------------------- voidJSONObject::setValue(	string key, 						string stringVal,						JSONValue::Type type){		JSONValue* value = new JSONValue();	value->setValue(stringVal, type);			this->setValue(key, value);}// ---------------------------------------------------------------------------//		¥ setValue(string key, string stringVal)// --------------------------------------------------------------------------- voidJSONObject::setValue(	string key, 						string stringVal){	JSONValue* value = new JSONValue();	value->setValue(stringVal, JSONValue::DATA_TYPE_STRING);			this->setValue(key, value);}					// ---------------------------------------------------------------------------//		¥ setValue(string key, int intVal)// --------------------------------------------------------------------------- voidJSONObject::setValue(	string key, 						int intVal){	stringstream strm;	strm << intVal;		JSONValue* value = new JSONValue();	value->setValue(strm.str(), JSONValue::DATA_TYPE_NUMBER);			this->setValue(key, value);}											// ---------------------------------------------------------------------------//		¥ setValue(string key, bool boolVal)// --------------------------------------------------------------------------- voidJSONObject::setValue(	string key, 						bool boolVal){	stringstream strm;	strm << boolVal;		JSONValue* value = new JSONValue();	value->setValue(strm.str(), JSONValue::DATA_TYPE_BOOLEAN);			this->setValue(key, value);}																			// ---------------------------------------------------------------------------//		¥ erase(string key)// --------------------------------------------------------------------------- voidJSONObject::erase(string key){	if (!_isArray) {		attributes.erase(key);	}}// ---------------------------------------------------------------------------//		¥ pushValue(JSONValue * value)// --------------------------------------------------------------------------- voidJSONObject::pushValue(JSONValue * value){	if (_isArray) {		array.push_back(value);	}}// ---------------------------------------------------------------------------//		¥ pushValue(string stringVal, JSONValue::Type type)// --------------------------------------------------------------------------- voidJSONObject::pushValue(	string stringVal,						JSONValue::Type type){	JSONValue* value = new JSONValue();	value->setValue(stringVal, type);			this->pushValue(value);}// ---------------------------------------------------------------------------//		¥ pushValue(int position, string stringVal)// ---------------------------------------------------------------------------voidJSONObject::pushValue(	int position, 						string stringVal){	JSONValue* value = new JSONValue();	value->setValue(stringVal, JSONValue::DATA_TYPE_STRING);			this->pushValue(position, value);}// ---------------------------------------------------------------------------//		¥ pushValue(int position, int intVal)// ---------------------------------------------------------------------------voidJSONObject::pushValue(	int position, 						int intVal){	stringstream strm;	strm << intVal;		JSONValue* value = new JSONValue();	value->setValue(strm.str(), JSONValue::DATA_TYPE_NUMBER);			this->pushValue(position, value);}// ---------------------------------------------------------------------------//		¥ pushValue(int position, bool boolVal)// ---------------------------------------------------------------------------voidJSONObject::pushValue(	int position, 						bool boolVal){	stringstream strm;	strm << boolVal;		JSONValue* value = new JSONValue();	value->setValue(strm.str(), JSONValue::DATA_TYPE_BOOLEAN);			this->pushValue(position, value);}// ---------------------------------------------------------------------------//		¥ pushValue(JSONObject* objectVal)// --------------------------------------------------------------------------- voidJSONObject::pushValue(JSONObject* objectVal){	JSONValue* value = new JSONValue();	value->setValue(objectVal);	this->pushValue(value);}// ---------------------------------------------------------------------------//		¥ insert(int position, JSONValue* value)// ---------------------------------------------------------------------------voidJSONObject::insert(		int position, 						JSONValue* value){	if (_isArray && position <= (int)array.size()) {		array.insert(array.begin() + position, value);	}}// ---------------------------------------------------------------------------//		¥ insert(int position, string stringVal, JSONValue::Type type)// ---------------------------------------------------------------------------voidJSONObject::insert(		int position, 						string stringVal,						JSONValue::Type type){	JSONValue* value = new JSONValue();	value->setValue(stringVal, type);			this->insert(position, value);}// ---------------------------------------------------------------------------//		¥ insert(int position, string stringVal)// ---------------------------------------------------------------------------voidJSONObject::insert(		int position, 						string stringVal){	JSONValue* value = new JSONValue();	value->setValue(stringVal, JSONValue::DATA_TYPE_STRING);			this->insert(position, value);}// ---------------------------------------------------------------------------//		¥ insert(int position, int intVal)// ---------------------------------------------------------------------------voidJSONObject::insert(		int position, 						int intVal){	stringstream strm;	strm << intVal;		JSONValue* value = new JSONValue();	value->setValue(strm.str(), JSONValue::DATA_TYPE_NUMBER);			this->insert(position, value);}// ---------------------------------------------------------------------------//		¥ insert(int position, bool boolVal)// ---------------------------------------------------------------------------voidJSONObject::insert(		int position, 						bool boolVal){	stringstream strm;	strm << boolVal;		JSONValue* value = new JSONValue();	value->setValue(strm.str(), JSONValue::DATA_TYPE_BOOLEAN);			this->insert(position, value);}								// ---------------------------------------------------------------------------//		¥ insert(int position, JSONObject* objectVal)// ---------------------------------------------------------------------------voidJSONObject::insert(		int position, 						JSONObject* objectVal){	JSONValue* value = new JSONValue();	value->setValue(objectVal);	this->insert(position, value);}								// ---------------------------------------------------------------------------//		¥ erase(int position)// --------------------------------------------------------------------------- voidJSONObject::erase(int position){	if (_isArray && position <= (int)array.size()) {		array.erase(array.begin() + position);	}}// ---------------------------------------------------------------------------//		¥ toString()// --------------------------------------------------------------------------- stringJSONObject::toString(){	string output = "";			// Indent output	//	string indentString = "";	int i = 1;	while ( i < indent ) { 	   indentString += "    ";	   i++;	}		// Parse array	//	if (_isArray) {		typedef vector<JSONValue*, allocator<JSONValue*> >::iterator it_type;		int size = (int)array.size();		int position = 1;				output += "[";		output += "\n"; // Indent				for (it_type it = array.begin(); it != array.end(); it++) {			JSONValue* value 	= (JSONValue*)*it;						output += indentString + "    ";						// Outup an object	    	//	    	if (value->getType() == JSONValue::DATA_TYPE_OBJECT) {	    			    		output += value->toObject()->toString();	    	}	    	// Output any other value	    	//	    	else {	    		output += value->toString();	    	}	    		    	if (position < size) {	    		output += ",";	    	}	    	output += "\n"; // Indent	    		    	position ++;		}		output += indentString + "]";			}		// Parse attributes	//	else {		typedef map<string, JSONValue*, less<string>, allocator<JSONValue*> >::iterator it_type;			int size = (int)attributes.size();		int position = 1;				output += "{";		output += "\n"; // Indent			for (it_type it = attributes.begin(); it != attributes.end(); it++) {      			    	string key 			= (string)(*it).first;	    	JSONValue* value 	= (JSONValue*)(*it).second;	    		    		    	output += indentString + "    \"" + key + "\":";	    		    	// Outup an object	    	//	    	if (value->getType() == JSONValue::DATA_TYPE_OBJECT) {	    			    		output += value->toObject()->toString();	    	}	    	// Output any other value	    	//	    	else {	    		output += value->toString();	    	}	    		    	if (position < size) {	    		output += ",";	    	}	    	output += "\n"; // Indent	    		    	position ++;	    }	    	    output += indentString + "}";	}                    return output;}