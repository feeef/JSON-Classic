#ifndef _JSON_OBJECT_H_#define _JSON_OBJECT_H_#include <map>#include <vector>#include "JSONValue.h"class JSONObject {public:      	      						JSONObject();										JSONObject(bool isArray);													virtual			~JSONObject();			bool			empty();		bool			isArray();			void			setIndent(int ind);			JSONObject*		getParent();	void 			setParent(JSONObject * parent);			string			toString();											// Hash //////////////////////////////////////////////////////	//	// Those methods only work when isArray() is false.	// Otherwise, the method does nothing or returns null	//	JSONValue*		getValue(string key);			void 			setValue(	string key, 								JSONValue * value);		void			setValue(	string key, 								JSONObject * objectVal);		void			setValue(	string key, 								string stringVal,								JSONValue::Type type);									void			setValue(	string key, 								string stringVal);	void			setValue(	string key, 								int intVal);									void			setValue(	string key, 								bool boolVal);	void			erase(string key);			// Array //////////////////////////////////////////////////////	//	// Those methods only work when isArray() is true.	// Otherwise, the method does nothing or returns null	//	JSONValue*		getValue(int position);			void			pushValue(JSONValue* value);		void			pushValue(	string stringVal,								JSONValue::Type type);									void			pushValue(JSONObject* objectVal);		void 			pushValue(	int position, 								string stringVal);									void 			pushValue(	int position, 								int intVal);	void 			pushValue(	int position, 								bool boolVal);		void 			insert(		int position, 								JSONValue* value);	void 			insert(		int position, 								string stringVal,								JSONValue::Type type);									void 			insert(		int position, 								JSONObject* objectVal);									void 			insert(		int position, 								string stringVal);									void 			insert(		int position, 								int intVal);	void 			insert(		int position, 								bool boolVal);	void 			erase(int position);	protected:     	map<string, JSONValue *, less<string>, allocator<JSONValue*> > attributes;		vector<JSONValue*, allocator<JSONValue*> > array;		JSONObject * parentObject;		int indent;		bool _isArray;		};#endif